FROM ckan/ckan-dev:2.11

# Install any extensions needed by your CKAN instance
# - Make sure to add the plugins to CKAN__PLUGINS in the .env file
# - Also make sure all provide all extra configuration options, either by:
#   * Adding them to the .env file (check the ckanext-envvars syntax for env vars), or
#   * Adding extra configuration scripts to /docker-entrypoint.d folder) to update
#      the CKAN config file (ckan.ini) with the `ckan config-tool` command
#
# See README > Extending the base images for more details
#
# For instance:
#
ENV SRV_DIR="/srv"
ENV APP_DIR="/srv/app"
ENV SRC_DIR="/srv/app/src"
ENV CKAN_DIR="${SRC_DIR}/ckan"
ENV DATA_DIR="${APP_DIR}/data"
ENV CKAN_INI="${APP_DIR}/ckan.ini"

USER root

RUN apt-get update && \
    apt-get install -y supervisor

# Default CKAN Extensions

### XLoader ###
ENV XLOADER_GIT_URL="https://github.com/ckan/ckanext-xloader.git"
ENV XLOADER_GIT_VERSION="2.1.0"
ENV XLOADER_REQUIREMENTS_URL="https://raw.githubusercontent.com/ckan/ckanext-xloader/refs/tags/${XLOADER_GIT_VERSION}/requirements.txt"

RUN pip3 install -e git+${XLOADER_GIT_URL}@${XLOADER_GIT_VERSION}#egg=ckanext-xloader
RUN pip3 install -r ${XLOADER_REQUIREMENTS_URL}
RUN pip3 install -U requests[security]


### ckanext-auth # for api user login's
ENV CKAN_AUTH_GIT_URL="https://github.com/datopian/ckanext-auth.git"
ENV CKAN_AUTH_VERSION="v2.11"

RUN pip install --no-cache-dir -e git+${CKAN_AUTH_GIT_URL}@${CKAN_AUTH_VERSION}#egg=ckanext-auth


### Envvars
ENV ENVVARS_GIT_URL="https://github.com/okfn/ckanext-envvars"
ENV ENVVARS_GIT_VERSION="v0.0.6"

# RUN pip3 install  -e git+${ENVVARS_GIT_URL}${ENVVARS_GIT_VERSION}#egg=ckanext-envvars --no-input
# RUN pip3 install -r https://raw.githubusercontent.com/ckan/ckanext-envvars/refs/heads/master/dev-requirements.txt


### Harvester ###
ENV CKAN_HARVESTER_GIT_URL="https://github.com/ckan/ckanext-harvest.git"
ENV CKAN_HARVESTER_VERSION="v1.6.1"

RUN pip3 install -e git+${CKAN_HARVESTER_GIT_URL}@${CKAN_HARVESTER_VERSION}#egg=ckanext-harvest && \
   pip3 install -r ${APP_DIR}/src/ckanext-harvest/requirements.txt

COPY --chown=ckan:ckan ckan_harvesting.conf /etc/supervisor/conf.d/ckan_harvesting.conf


### Scheming ###
ENV CKAN_SCHEMING_GIT_URL="https://github.com/ckan/ckanext-scheming.git"
ENV CKAN_SCHEMING_VERSION="release-3.1.0"

RUN  pip3 install -e git+${CKAN_SCHEMING_GIT_URL}@${CKAN_SCHEMING_VERSION}#egg=ckanext-scheming

### Pages ###
#RUN  pip3 install -e git+https://github.com/ckan/ckanext-pages.git#egg=ckanext-pages

### DCAT ###
ENV CKAN_DCAT_GIT_URL="https://github.com/ckan/ckanext-dcat.git"
ENV CKAN_DCAT_VERSION="v2.4.0"
ENV CKAN_DCAT_REQUIREMENTS="https://raw.githubusercontent.com/ckan/ckanext-dcat/${CKAN_DCAT_VERSION}/requirements.txt"

RUN  pip3 install -e git+${CKAN_DCAT_GIT_URL}@${CKAN_DCAT_VERSION}#egg=ckanext-dcat && \
    pip3 install -r ${CKAN_DCAT_REQUIREMENTS}

# Clone the extension(s) your are writing for your own project in the `src` folder
# to get them mounted in this image at runtime


# Create and update CKAN config
RUN echo "UTC" >  /etc/timezone && \
    ckan config-tool ${CKAN_INI} -s logger_ckanext -e level=INFO

RUN groupadd --gid 92 ckan && \
    chown -R ckan:ckan /srv


# Apply any patches needed to CKAN core or any of the built extensions (not the
# runtime mounted ones)
COPY --chown=ckan:ckan patches /srv/app/patches

WORKDIR /srv/app

# Copy necessary scripts
COPY --chown=ckan:ckan setup /srv/app

EXPOSE 5000

HEALTHCHECK --interval=10s --timeout=5s --retries=5 CMD curl --fail http://localhost:5000/api/3/action/status_show || exit 1

USER ckan

RUN for d in $APP_DIR/patches/*; do \
        if [ -d $d ]; then \
            for f in `ls $d/*.patch | sort -g`; do \
                cd $SRC_DIR/`basename "$d"` && echo "$0: Applying patch $f to $SRC_DIR/`basename $d`"; patch -p1 < "$f" ; \
            done ; \
        fi ; \
    done

ENV UWSGI_PROC_NU="2"
ENV UWSGI_OPTS="--socket /tmp/uwsgi.sock --uid ckan --gid ckan --http :5000 --master --enable-threads --wsgi-file $APP_DIR/wsgi.py --module wsgi:application --lazy-apps -p ${UWSGI_PROC_NU} -L --vacuum --harakiri 50 --callable application"

# CMD ["/srv/app/start_ckan.sh"]
CMD ["python3", "/srv/app/start_ckan.py"]

